//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');


declare enum NullType {
  __NULL__ = 0,
  NaN = 1,
  BAD_DATA = 2,
  BAD_TYPE = 3,
  ERR_OVERFLOW = 4,
  UNKNOWN_PROP = 5,
  DIV_BY_ZERO = 6,
  OUT_OF_RANGE = 7,
}

declare enum PropertyType {
  UNKNOWN = 0,
  BOOL = 1,
  INT64 = 2,
  VID = 3,
  FLOAT = 4,
  DOUBLE = 5,
  STRING = 6,
  FIXED_STRING = 7,
  INT8 = 8,
  INT16 = 9,
  INT32 = 10,
  TIMESTAMP = 21,
  DURATION = 23,
  DATE = 24,
  DATETIME = 25,
  TIME = 26,
  GEOGRAPHY = 31,
}

declare enum ErrorCode {
  SUCCEEDED = 0,
  E_DISCONNECTED = -1,
  E_FAIL_TO_CONNECT = -2,
  E_RPC_FAILURE = -3,
  E_LEADER_CHANGED = -4,
  E_SPACE_NOT_FOUND = -5,
  E_TAG_NOT_FOUND = -6,
  E_EDGE_NOT_FOUND = -7,
  E_INDEX_NOT_FOUND = -8,
  E_EDGE_PROP_NOT_FOUND = -9,
  E_TAG_PROP_NOT_FOUND = -10,
  E_ROLE_NOT_FOUND = -11,
  E_CONFIG_NOT_FOUND = -12,
  E_MACHINE_NOT_FOUND = -13,
  E_ZONE_NOT_FOUND = -14,
  E_LISTENER_NOT_FOUND = -15,
  E_PART_NOT_FOUND = -16,
  E_KEY_NOT_FOUND = -17,
  E_USER_NOT_FOUND = -18,
  E_STATS_NOT_FOUND = -19,
  E_SERVICE_NOT_FOUND = -20,
  E_BACKUP_FAILED = -24,
  E_BACKUP_EMPTY_TABLE = -25,
  E_BACKUP_TABLE_FAILED = -26,
  E_PARTIAL_RESULT = -27,
  E_REBUILD_INDEX_FAILED = -28,
  E_INVALID_PASSWORD = -29,
  E_FAILED_GET_ABS_PATH = -30,
  E_BAD_USERNAME_PASSWORD = -1001,
  E_SESSION_INVALID = -1002,
  E_SESSION_TIMEOUT = -1003,
  E_SYNTAX_ERROR = -1004,
  E_EXECUTION_ERROR = -1005,
  E_STATEMENT_EMPTY = -1006,
  E_BAD_PERMISSION = -1008,
  E_SEMANTIC_ERROR = -1009,
  E_TOO_MANY_CONNECTIONS = -1010,
  E_PARTIAL_SUCCEEDED = -1011,
  E_NO_HOSTS = -2001,
  E_EXISTED = -2002,
  E_INVALID_HOST = -2003,
  E_UNSUPPORTED = -2004,
  E_NOT_DROP = -2005,
  E_BALANCER_RUNNING = -2006,
  E_CONFIG_IMMUTABLE = -2007,
  E_CONFLICT = -2008,
  E_INVALID_PARM = -2009,
  E_WRONGCLUSTER = -2010,
  E_ZONE_NOT_ENOUGH = -2011,
  E_ZONE_IS_EMPTY = -2012,
  E_STORE_FAILURE = -2021,
  E_STORE_SEGMENT_ILLEGAL = -2022,
  E_BAD_BALANCE_PLAN = -2023,
  E_BALANCED = -2024,
  E_NO_RUNNING_BALANCE_PLAN = -2025,
  E_NO_VALID_HOST = -2026,
  E_CORRUPTED_BALANCE_PLAN = -2027,
  E_NO_INVALID_BALANCE_PLAN = -2028,
  E_IMPROPER_ROLE = -2030,
  E_INVALID_PARTITION_NUM = -2031,
  E_INVALID_REPLICA_FACTOR = -2032,
  E_INVALID_CHARSET = -2033,
  E_INVALID_COLLATE = -2034,
  E_CHARSET_COLLATE_NOT_MATCH = -2035,
  E_SNAPSHOT_FAILURE = -2040,
  E_BLOCK_WRITE_FAILURE = -2041,
  E_REBUILD_INDEX_FAILURE = -2042,
  E_INDEX_WITH_TTL = -2043,
  E_ADD_JOB_FAILURE = -2044,
  E_STOP_JOB_FAILURE = -2045,
  E_SAVE_JOB_FAILURE = -2046,
  E_BALANCER_FAILURE = -2047,
  E_JOB_NOT_FINISHED = -2048,
  E_TASK_REPORT_OUT_DATE = -2049,
  E_JOB_NOT_IN_SPACE = -2050,
  E_JOB_NEED_RECOVER = -2051,
  E_INVALID_JOB = -2065,
  E_BACKUP_BUILDING_INDEX = -2066,
  E_BACKUP_SPACE_NOT_FOUND = -2067,
  E_RESTORE_FAILURE = -2068,
  E_SESSION_NOT_FOUND = -2069,
  E_LIST_CLUSTER_FAILURE = -2070,
  E_LIST_CLUSTER_GET_ABS_PATH_FAILURE = -2071,
  E_LIST_CLUSTER_NO_AGENT_FAILURE = -2072,
  E_QUERY_NOT_FOUND = -2073,
  E_AGENT_HB_FAILUE = -2074,
  E_CONSENSUS_ERROR = -3001,
  E_KEY_HAS_EXISTS = -3002,
  E_DATA_TYPE_MISMATCH = -3003,
  E_INVALID_FIELD_VALUE = -3004,
  E_INVALID_OPERATION = -3005,
  E_NOT_NULLABLE = -3006,
  E_FIELD_UNSET = -3007,
  E_OUT_OF_RANGE = -3008,
  E_DATA_CONFLICT_ERROR = -3010,
  E_WRITE_STALLED = -3011,
  E_IMPROPER_DATA_TYPE = -3021,
  E_INVALID_SPACEVIDLEN = -3022,
  E_INVALID_FILTER = -3031,
  E_INVALID_UPDATER = -3032,
  E_INVALID_STORE = -3033,
  E_INVALID_PEER = -3034,
  E_RETRY_EXHAUSTED = -3035,
  E_TRANSFER_LEADER_FAILED = -3036,
  E_INVALID_STAT_TYPE = -3037,
  E_INVALID_VID = -3038,
  E_NO_TRANSFORMED = -3039,
  E_LOAD_META_FAILED = -3040,
  E_FAILED_TO_CHECKPOINT = -3041,
  E_CHECKPOINT_BLOCKED = -3042,
  E_FILTER_OUT = -3043,
  E_INVALID_DATA = -3044,
  E_MUTATE_EDGE_CONFLICT = -3045,
  E_MUTATE_TAG_CONFLICT = -3046,
  E_OUTDATED_LOCK = -3047,
  E_INVALID_TASK_PARA = -3051,
  E_USER_CANCEL = -3052,
  E_TASK_EXECUTION_FAILED = -3053,
  E_PLAN_IS_KILLED = -3060,
  E_NO_TERM = -3070,
  E_OUTDATED_TERM = -3071,
  E_OUTDATED_EDGE = -3072,
  E_WRITE_WRITE_CONFLICT = -3073,
  E_CLIENT_SERVER_INCOMPATIBLE = -3061,
  E_ID_FAILED = -3062,
  E_RAFT_UNKNOWN_PART = -3500,
  E_RAFT_LOG_GAP = -3501,
  E_RAFT_LOG_STALE = -3502,
  E_RAFT_TERM_OUT_OF_DATE = -3503,
  E_RAFT_UNKNOWN_APPEND_LOG = -3504,
  E_RAFT_WAITING_SNAPSHOT = -3511,
  E_RAFT_SENDING_SNAPSHOT = -3512,
  E_RAFT_INVALID_PEER = -3513,
  E_RAFT_NOT_READY = -3514,
  E_RAFT_STOPPED = -3515,
  E_RAFT_BAD_ROLE = -3516,
  E_RAFT_WAL_FAIL = -3521,
  E_RAFT_HOST_STOPPED = -3522,
  E_RAFT_TOO_MANY_REQUESTS = -3523,
  E_RAFT_PERSIST_SNAPSHOT_FAILED = -3524,
  E_RAFT_RPC_EXCEPTION = -3525,
  E_RAFT_NO_WAL_FOUND = -3526,
  E_RAFT_HOST_PAUSED = -3527,
  E_RAFT_WRITE_BLOCKED = -3528,
  E_RAFT_BUFFER_OVERFLOW = -3529,
  E_RAFT_ATOMIC_OP_FAILED = -3530,
  E_LEADER_LEASE_FAILED = -3531,
  E_UNKNOWN = -8000,
}

declare class SchemaID {
    public tag_id?: number;
    public edge_type?: number;

      constructor(args?: { tag_id?: number; edge_type?: number; });
  }

declare class Date {
    public year: number;
    public month: any;
    public day: any;

      constructor(args?: { year: number; month: any; day: any; });
  }

declare class Time {
    public hour: any;
    public minute: any;
    public sec: any;
    public microsec: number;

      constructor(args?: { hour: any; minute: any; sec: any; microsec: number; });
  }

declare class DateTime {
    public year: number;
    public month: any;
    public day: any;
    public hour: any;
    public minute: any;
    public sec: any;
    public microsec: number;

      constructor(args?: { year: number; month: any; day: any; hour: any; minute: any; sec: any; microsec: number; });
  }

declare class Value {
    public nVal?: NullType;
    public bVal?: boolean;
    public iVal?: Int64;
    public fVal?: number;
    public sVal?: string;
    public dVal?: Date;
    public tVal?: Time;
    public dtVal?: DateTime;
    public vVal?: Vertex;
    public eVal?: Edge;
    public pVal?: Path;
    public lVal?: NList;
    public mVal?: NMap;
    public uVal?: NSet;
    public gVal?: DataSet;
    public ggVal?: Geography;
    public duVal?: Duration;

      constructor(args?: { nVal?: NullType; bVal?: boolean; iVal?: Int64; fVal?: number; sVal?: string; dVal?: Date; tVal?: Time; dtVal?: DateTime; vVal?: Vertex; eVal?: Edge; pVal?: Path; lVal?: NList; mVal?: NMap; uVal?: NSet; gVal?: DataSet; ggVal?: Geography; duVal?: Duration; });
  }

declare class NList {
    public values: Value[];

      constructor(args?: { values: Value[]; });
  }

declare class NMap {
    public kvs: { [k: string]: Value; };

      constructor(args?: { kvs: { [k: string]: Value; }; });
  }

declare class NSet {
    public values: Value[];

      constructor(args?: { values: Value[]; });
  }

declare class Row {
    public values: Value[];

      constructor(args?: { values: Value[]; });
  }

declare class DataSet {
    public column_names: string[];
    public rows: Row[];

      constructor(args?: { column_names: string[]; rows: Row[]; });
  }

declare class Coordinate {
    public x: number;
    public y: number;

      constructor(args?: { x: number; y: number; });
  }

declare class Point {
    public coord: Coordinate;

      constructor(args?: { coord: Coordinate; });
  }

declare class LineString {
    public coordList: Coordinate[];

      constructor(args?: { coordList: Coordinate[]; });
  }

declare class Polygon {
    public coordListList: Coordinate[][];

      constructor(args?: { coordListList: Coordinate[][]; });
  }

declare class Geography {
    public ptVal?: Point;
    public lsVal?: LineString;
    public pgVal?: Polygon;

      constructor(args?: { ptVal?: Point; lsVal?: LineString; pgVal?: Polygon; });
  }

declare class Tag {
    public name: string;
    public props: { [k: string]: Value; };

      constructor(args?: { name: string; props: { [k: string]: Value; }; });
  }

declare class Vertex {
    public vid: Value;
    public tags: Tag[];

      constructor(args?: { vid: Value; tags: Tag[]; });
  }

declare class Edge {
    public src: Value;
    public dst: Value;
    public type: number;
    public name: string;
    public ranking: Int64;
    public props: { [k: string]: Value; };

      constructor(args?: { src: Value; dst: Value; type: number; name: string; ranking: Int64; props: { [k: string]: Value; }; });
  }

declare class Step {
    public dst: Vertex;
    public type: number;
    public name: string;
    public ranking: Int64;
    public props: { [k: string]: Value; };

      constructor(args?: { dst: Vertex; type: number; name: string; ranking: Int64; props: { [k: string]: Value; }; });
  }

declare class Path {
    public src: Vertex;
    public steps: Step[];

      constructor(args?: { src: Vertex; steps: Step[]; });
  }

declare class HostAddr {
    public host: string;
    public port: number;

      constructor(args?: { host: string; port: number; });
  }

declare class KeyValue {
    public key: string;
    public value: string;

      constructor(args?: { key: string; value: string; });
  }

declare class Duration {
    public seconds: Int64;
    public microseconds: number;
    public months: number;

      constructor(args?: { seconds: Int64; microseconds: number; months: number; });
  }

declare class LogInfo {
    public log_id: Int64;
    public term_id: Int64;

      constructor(args?: { log_id: Int64; term_id: Int64; });
  }

declare class DirInfo {
    public root: string;
    public data: string[];

      constructor(args?: { root: string; data: string[]; });
  }

declare class CheckpointInfo {
    public space_id: number;
    public parts: { [k: number]: LogInfo; };
    public path: string;

      constructor(args?: { space_id: number; parts: { [k: number]: LogInfo; }; path: string; });
  }

declare class LogEntry {
    public cluster: Int64;
    public log_str: string;

      constructor(args?: { cluster: Int64; log_str: string; });
  }

declare const version: string;
