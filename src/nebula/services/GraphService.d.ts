//
// Autogenerated by Thrift Compiler (0.19.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import common_ttypes = require('./common_types');


import ttypes = require('./graph_types');
import ProfilingStats = ttypes.ProfilingStats
import PlanNodeBranchInfo = ttypes.PlanNodeBranchInfo
import Pair = ttypes.Pair
import PlanNodeDescription = ttypes.PlanNodeDescription
import PlanDescription = ttypes.PlanDescription
import ExecutionResponse = ttypes.ExecutionResponse
import AuthResponse = ttypes.AuthResponse
import VerifyClientVersionResp = ttypes.VerifyClientVersionResp
import VerifyClientVersionReq = ttypes.VerifyClientVersionReq

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    authenticate(username: string, password: string): Promise<AuthResponse>;

    authenticate(username: string, password: string, callback?: (error: void, response: AuthResponse)=>void): void;

    signout(sessionId: Int64): Promise<void>;

    signout(sessionId: Int64, callback?: (error: void, response: void)=>void): void;

    execute(sessionId: Int64, stmt: Buffer): Promise<ExecutionResponse>;

    execute(sessionId: Int64, stmt: Buffer, callback?: (error: void, response: ExecutionResponse)=>void): void;

    executeWithParameter(sessionId: Int64, stmt: Buffer, parameterMap: { [k: string]: common_ttypes.Value; }): Promise<ExecutionResponse>;

    executeWithParameter(sessionId: Int64, stmt: Buffer, parameterMap: { [k: string]: common_ttypes.Value; }, callback?: (error: void, response: ExecutionResponse)=>void): void;

    executeJson(sessionId: Int64, stmt: Buffer): Promise<Buffer>;

    executeJson(sessionId: Int64, stmt: Buffer, callback?: (error: void, response: Buffer)=>void): void;

    executeJsonWithParameter(sessionId: Int64, stmt: Buffer, parameterMap: any): Promise<Buffer>;

    executeJsonWithParameter(sessionId: Int64, stmt: Buffer, parameterMap: any, callback?: (error: void, response: Buffer)=>void): void;

    verifyClientVersion(req: VerifyClientVersionReq): Promise<VerifyClientVersionResp>;

    verifyClientVersion(req: VerifyClientVersionReq, callback?: (error: void, response: VerifyClientVersionResp)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_authenticate(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_signout(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_execute(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_executeWithParameter(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_executeJson(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_executeJsonWithParameter(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_verifyClientVersion(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
