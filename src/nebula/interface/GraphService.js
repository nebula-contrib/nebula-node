//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// 1. 基于Thrift 0.14.1和修改版的common.thrift、graph.thrift生成
// 2. 基于生成文件针对typescript进行二次修改
// 除非你清楚自己在干什么，否则不要修改该文件
//
'use strict'

const thrift = require('../../thrift')
const Thrift = thrift.Thrift
const Q = thrift.Q
const Int64 = require('node-int64')

const common_ttypes = require('./common_types')


const ttypes = require('./graph_types')
// HELPER FUNCTIONS AND STRUCTURES

const GraphService_authenticate_args = function(args) {
  this.username = null
  this.password = null
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password
    }
  }
}
GraphService_authenticate_args.prototype = {}
GraphService_authenticate_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.username = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.password = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_authenticate_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_authenticate_args')
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1)
    output.writeBinary(this.username)
    output.writeFieldEnd()
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2)
    output.writeBinary(this.password)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_authenticate_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AuthResponse(args.success)
    }
  }
}
GraphService_authenticate_result.prototype = {}
GraphService_authenticate_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AuthResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_authenticate_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_authenticate_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_signout_args = function(args) {
  this.sessionId = null
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId
    }
  }
}
GraphService_signout_args.prototype = {}
GraphService_signout_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I64) {
          this.sessionId = input.readI64()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_signout_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_signout_args')
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1)
    output.writeI64(this.sessionId)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_signout_result = function(args) {
}
GraphService_signout_result.prototype = {}
GraphService_signout_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    if (ftype == Thrift.Type.STOP) {
      break
    }
    input.skip(ftype)
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_signout_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_signout_result')
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_execute_args = function(args) {
  this.sessionId = null
  this.stmt = null
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId
    }
    if (args.stmt !== undefined && args.stmt !== null) {
      this.stmt = args.stmt
    }
  }
}
GraphService_execute_args.prototype = {}
GraphService_execute_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I64) {
          this.sessionId = input.readI64()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stmt = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_execute_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_execute_args')
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1)
    output.writeI64(this.sessionId)
    output.writeFieldEnd()
  }
  if (this.stmt !== null && this.stmt !== undefined) {
    output.writeFieldBegin('stmt', Thrift.Type.STRING, 2)
    output.writeBinary(this.stmt)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_execute_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExecutionResponse(args.success)
    }
  }
}
GraphService_execute_result.prototype = {}
GraphService_execute_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ExecutionResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_execute_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_execute_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_executeWithParameter_args = function(args) {
  this.sessionId = null
  this.stmt = null
  this.parameterMap = null
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId
    }
    if (args.stmt !== undefined && args.stmt !== null) {
      this.stmt = args.stmt
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [common_ttypes.Value])
    }
  }
}
GraphService_executeWithParameter_args.prototype = {}
GraphService_executeWithParameter_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I64) {
          this.sessionId = input.readI64()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stmt = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.MAP) {
          this.parameterMap = {}
          const _rtmp335 = input.readMapBegin()
          const _size34 = _rtmp335.size || 0
          for (let _i36 = 0; _i36 < _size34; ++_i36) {
            let key37 = null
            let val38 = null
            key37 = input.readBinary()
            val38 = new common_ttypes.Value()
            val38.read(input)
            this.parameterMap[key37] = val38
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_executeWithParameter_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeWithParameter_args')
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1)
    output.writeI64(this.sessionId)
    output.writeFieldEnd()
  }
  if (this.stmt !== null && this.stmt !== undefined) {
    output.writeFieldBegin('stmt', Thrift.Type.STRING, 2)
    output.writeBinary(this.stmt)
    output.writeFieldEnd()
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.parameterMap))
    for (const kiter39 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter39)) {
        const viter40 = this.parameterMap[kiter39]
        output.writeBinary(kiter39)
        viter40.write(output)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_executeWithParameter_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExecutionResponse(args.success)
    }
  }
}
GraphService_executeWithParameter_result.prototype = {}
GraphService_executeWithParameter_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.ExecutionResponse()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_executeWithParameter_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeWithParameter_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_executeJson_args = function(args) {
  this.sessionId = null
  this.stmt = null
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId
    }
    if (args.stmt !== undefined && args.stmt !== null) {
      this.stmt = args.stmt
    }
  }
}
GraphService_executeJson_args.prototype = {}
GraphService_executeJson_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I64) {
          this.sessionId = input.readI64()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stmt = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_executeJson_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeJson_args')
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1)
    output.writeI64(this.sessionId)
    output.writeFieldEnd()
  }
  if (this.stmt !== null && this.stmt !== undefined) {
    output.writeFieldBegin('stmt', Thrift.Type.STRING, 2)
    output.writeBinary(this.stmt)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_executeJson_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
  }
}
GraphService_executeJson_result.prototype = {}
GraphService_executeJson_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_executeJson_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeJson_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeBinary(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_executeJsonWithParameter_args = function(args) {
  this.sessionId = null
  this.stmt = null
  this.parameterMap = null
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId
    }
    if (args.stmt !== undefined && args.stmt !== null) {
      this.stmt = args.stmt
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [common_ttypes.Value])
    }
  }
}
GraphService_executeJsonWithParameter_args.prototype = {}
GraphService_executeJsonWithParameter_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I64) {
          this.sessionId = input.readI64()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stmt = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      case 3:
        if (ftype == Thrift.Type.MAP) {
          this.parameterMap = {}
          const _rtmp342 = input.readMapBegin()
          const _size41 = _rtmp342.size || 0
          for (let _i43 = 0; _i43 < _size41; ++_i43) {
            let key44 = null
            let val45 = null
            key44 = input.readBinary()
            val45 = new common_ttypes.Value()
            val45.read(input)
            this.parameterMap[key44] = val45
          }
          input.readMapEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_executeJsonWithParameter_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeJsonWithParameter_args')
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.I64, 1)
    output.writeI64(this.sessionId)
    output.writeFieldEnd()
  }
  if (this.stmt !== null && this.stmt !== undefined) {
    output.writeFieldBegin('stmt', Thrift.Type.STRING, 2)
    output.writeBinary(this.stmt)
    output.writeFieldEnd()
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3)
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.parameterMap))
    for (const kiter46 in this.parameterMap) {
      if (this.parameterMap.hasOwnProperty(kiter46)) {
        const viter47 = this.parameterMap[kiter46]
        output.writeBinary(kiter46)
        viter47.write(output)
      }
    }
    output.writeMapEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_executeJsonWithParameter_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success
    }
  }
}
GraphService_executeJsonWithParameter_result.prototype = {}
GraphService_executeJsonWithParameter_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readBinary()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_executeJsonWithParameter_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_executeJsonWithParameter_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0)
    output.writeBinary(this.success)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_verifyClientVersion_args = function(args) {
  this.req = null
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.VerifyClientVersionReq(args.req)
    }
  }
}
GraphService_verifyClientVersion_args.prototype = {}
GraphService_verifyClientVersion_args.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.req = new ttypes.VerifyClientVersionReq()
          this.req.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_verifyClientVersion_args.prototype.write = function(output) {
  output.writeStructBegin('GraphService_verifyClientVersion_args')
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1)
    this.req.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}

const GraphService_verifyClientVersion_result = function(args) {
  this.success = null
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.VerifyClientVersionResp(args.success)
    }
  }
}
GraphService_verifyClientVersion_result.prototype = {}
GraphService_verifyClientVersion_result.prototype.read = function(input) {
  input.readStructBegin()
  while (true) {
    const ret = input.readFieldBegin()
    const ftype = ret.ftype
    const fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.VerifyClientVersionResp()
          this.success.read(input)
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
}

GraphService_verifyClientVersion_result.prototype.write = function(output) {
  output.writeStructBegin('GraphService_verifyClientVersion_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0)
    this.success.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
}


function GraphServiceClient(output, pClass) {
  this.output = output
  this.pClass = pClass
  this._seqid = 0
  this._reqs = {}
}
GraphServiceClient.prototype = {}
GraphServiceClient.prototype.seqid = function() { return this._seqid }
GraphServiceClient.prototype.new_seqid = function() { return this._seqid += 1 }

GraphServiceClient.prototype.authenticate = function(username, password, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_authenticate(username, password)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_authenticate(username, password)
  }
}

GraphServiceClient.prototype.send_authenticate = function(username, password) {
  const output = new this.pClass(this.output)
  const params = {
    username: username,
    password: password
  }
  const args = new GraphService_authenticate_args(params)
  try {
    output.writeMessageBegin('authenticate', Thrift.MessageType.CALL, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    return this.output.flush()
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.recv_authenticate = function(input, mtype, rseqid) {
  const callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    const x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  const result = new GraphService_authenticate_result()
  result.read(input)
  input.readMessageEnd()

  if (result.success !== null) {
    return callback(null, result.success)
  }
  return callback('authenticate failed: unknown result')
}

GraphServiceClient.prototype.signout = function(sessionId, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_signout(sessionId)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_signout(sessionId)
  }
}

GraphServiceClient.prototype.send_signout = function(sessionId) {
  const output = new this.pClass(this.output)
  const params = {
    sessionId: sessionId
  }
  const args = new GraphService_signout_args(params)
  try {
    output.writeMessageBegin('signout', Thrift.MessageType.ONEWAY, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    this.output.flush()
    const callback = this._reqs[this.seqid()] || function() {}
    delete this._reqs[this.seqid()]
    callback(null)
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.execute = function(sessionId, stmt, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_execute(sessionId, stmt)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_execute(sessionId, stmt)
  }
}

GraphServiceClient.prototype.send_execute = function(sessionId, stmt) {
  const output = new this.pClass(this.output)
  const params = {
    sessionId: sessionId,
    stmt: stmt
  }
  const args = new GraphService_execute_args(params)
  try {
    output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    return this.output.flush()
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.recv_execute = function(input, mtype, rseqid) {
  const callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    const x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  const result = new GraphService_execute_result()
  result.read(input)
  input.readMessageEnd()

  if (result.success !== null) {
    return callback(null, result.success)
  }
  return callback('execute failed: unknown result')
}

GraphServiceClient.prototype.executeWithParameter = function(sessionId, stmt, parameterMap, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_executeWithParameter(sessionId, stmt, parameterMap)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_executeWithParameter(sessionId, stmt, parameterMap)
  }
}

GraphServiceClient.prototype.send_executeWithParameter = function(sessionId, stmt, parameterMap) {
  const output = new this.pClass(this.output)
  const params = {
    sessionId: sessionId,
    stmt: stmt,
    parameterMap: parameterMap
  }
  const args = new GraphService_executeWithParameter_args(params)
  try {
    output.writeMessageBegin('executeWithParameter', Thrift.MessageType.CALL, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    return this.output.flush()
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.recv_executeWithParameter = function(input, mtype, rseqid) {
  const callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    const x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  const result = new GraphService_executeWithParameter_result()
  result.read(input)
  input.readMessageEnd()

  if (result.success !== null) {
    return callback(null, result.success)
  }
  return callback('executeWithParameter failed: unknown result')
}

GraphServiceClient.prototype.executeJson = function(sessionId, stmt, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_executeJson(sessionId, stmt)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_executeJson(sessionId, stmt)
  }
}

GraphServiceClient.prototype.send_executeJson = function(sessionId, stmt) {
  const output = new this.pClass(this.output)
  const params = {
    sessionId: sessionId,
    stmt: stmt
  }
  const args = new GraphService_executeJson_args(params)
  try {
    output.writeMessageBegin('executeJson', Thrift.MessageType.CALL, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    return this.output.flush()
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.recv_executeJson = function(input, mtype, rseqid) {
  const callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    const x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  const result = new GraphService_executeJson_result()
  result.read(input)
  input.readMessageEnd()

  if (result.success !== null) {
    return callback(null, result.success)
  }
  return callback('executeJson failed: unknown result')
}

GraphServiceClient.prototype.executeJsonWithParameter = function(sessionId, stmt, parameterMap, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_executeJsonWithParameter(sessionId, stmt, parameterMap)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_executeJsonWithParameter(sessionId, stmt, parameterMap)
  }
}

GraphServiceClient.prototype.send_executeJsonWithParameter = function(sessionId, stmt, parameterMap) {
  const output = new this.pClass(this.output)
  const params = {
    sessionId: sessionId,
    stmt: stmt,
    parameterMap: parameterMap
  }
  const args = new GraphService_executeJsonWithParameter_args(params)
  try {
    output.writeMessageBegin('executeJsonWithParameter', Thrift.MessageType.CALL, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    return this.output.flush()
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.recv_executeJsonWithParameter = function(input, mtype, rseqid) {
  const callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    const x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  const result = new GraphService_executeJsonWithParameter_result()
  result.read(input)
  input.readMessageEnd()

  if (result.success !== null) {
    return callback(null, result.success)
  }
  return callback('executeJsonWithParameter failed: unknown result')
}

GraphServiceClient.prototype.verifyClientVersion = function(req, callback) {
  this._seqid = this.new_seqid()
  if (callback === undefined) {
    const _defer = Q.defer()
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error)
      } else {
        _defer.resolve(result)
      }
    }
    this.send_verifyClientVersion(req)
    return _defer.promise
  } else {
    this._reqs[this.seqid()] = callback
    this.send_verifyClientVersion(req)
  }
}

GraphServiceClient.prototype.send_verifyClientVersion = function(req) {
  const output = new this.pClass(this.output)
  const params = {
    req: req
  }
  const args = new GraphService_verifyClientVersion_args(params)
  try {
    output.writeMessageBegin('verifyClientVersion', Thrift.MessageType.CALL, this.seqid())
    args.write(output)
    output.writeMessageEnd()
    return this.output.flush()
  } catch (e) {
    delete this._reqs[this.seqid()]
    if (typeof output.reset === 'function') {
      output.reset()
    }
    throw e
  }
}

GraphServiceClient.prototype.recv_verifyClientVersion = function(input, mtype, rseqid) {
  const callback = this._reqs[rseqid] || function() {}
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    const x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  const result = new GraphService_verifyClientVersion_result()
  result.read(input)
  input.readMessageEnd()

  if (result.success !== null) {
    return callback(null, result.success)
  }
  return callback('verifyClientVersion failed: unknown result')
}

function GraphServiceProcessor(handler) {
  this._handler = handler
}

GraphServiceProcessor.prototype.process = function(input, output) {
  const r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    const x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}
GraphServiceProcessor.prototype.process_authenticate = function(seqid, input, output) {
  const args = new GraphService_authenticate_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.authenticate.length === 2) {
    Q.fcall(this._handler.authenticate.bind(this._handler),
      args.username,
      args.password
    ).then(function(result) {
      const result_obj = new GraphService_authenticate_result({ success: result })
      output.writeMessageBegin('authenticate', Thrift.MessageType.REPLY, seqid)
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    }).catch(function (err) {
      let result
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
      output.writeMessageBegin('authenticate', Thrift.MessageType.EXCEPTION, seqid)
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  } else {
    this._handler.authenticate(args.username, args.password, function (err, result) {
      let result_obj
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new GraphService_authenticate_result((err !== null || typeof err === 'undefined') ? err : { success: result })
        output.writeMessageBegin('authenticate', Thrift.MessageType.REPLY, seqid)
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('authenticate', Thrift.MessageType.EXCEPTION, seqid)
      }
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}
GraphServiceProcessor.prototype.process_signout = function(seqid, input, output) {
  const args = new GraphService_signout_args()
  args.read(input)
  input.readMessageEnd()
  this._handler.signout(args.sessionId)
}
GraphServiceProcessor.prototype.process_execute = function(seqid, input, output) {
  const args = new GraphService_execute_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.execute.length === 2) {
    Q.fcall(this._handler.execute.bind(this._handler),
      args.sessionId,
      args.stmt
    ).then(function(result) {
      const result_obj = new GraphService_execute_result({ success: result })
      output.writeMessageBegin('execute', Thrift.MessageType.REPLY, seqid)
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    }).catch(function (err) {
      let result
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
      output.writeMessageBegin('execute', Thrift.MessageType.EXCEPTION, seqid)
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  } else {
    this._handler.execute(args.sessionId, args.stmt, function (err, result) {
      let result_obj
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new GraphService_execute_result((err !== null || typeof err === 'undefined') ? err : { success: result })
        output.writeMessageBegin('execute', Thrift.MessageType.REPLY, seqid)
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('execute', Thrift.MessageType.EXCEPTION, seqid)
      }
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}
GraphServiceProcessor.prototype.process_executeWithParameter = function(seqid, input, output) {
  const args = new GraphService_executeWithParameter_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.executeWithParameter.length === 3) {
    Q.fcall(this._handler.executeWithParameter.bind(this._handler),
      args.sessionId,
      args.stmt,
      args.parameterMap
    ).then(function(result) {
      const result_obj = new GraphService_executeWithParameter_result({ success: result })
      output.writeMessageBegin('executeWithParameter', Thrift.MessageType.REPLY, seqid)
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    }).catch(function (err) {
      let result
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
      output.writeMessageBegin('executeWithParameter', Thrift.MessageType.EXCEPTION, seqid)
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  } else {
    this._handler.executeWithParameter(args.sessionId, args.stmt, args.parameterMap, function (err, result) {
      let result_obj
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new GraphService_executeWithParameter_result((err !== null || typeof err === 'undefined') ? err : { success: result })
        output.writeMessageBegin('executeWithParameter', Thrift.MessageType.REPLY, seqid)
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('executeWithParameter', Thrift.MessageType.EXCEPTION, seqid)
      }
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}
GraphServiceProcessor.prototype.process_executeJson = function(seqid, input, output) {
  const args = new GraphService_executeJson_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.executeJson.length === 2) {
    Q.fcall(this._handler.executeJson.bind(this._handler),
      args.sessionId,
      args.stmt
    ).then(function(result) {
      const result_obj = new GraphService_executeJson_result({ success: result })
      output.writeMessageBegin('executeJson', Thrift.MessageType.REPLY, seqid)
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    }).catch(function (err) {
      let result
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
      output.writeMessageBegin('executeJson', Thrift.MessageType.EXCEPTION, seqid)
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  } else {
    this._handler.executeJson(args.sessionId, args.stmt, function (err, result) {
      let result_obj
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new GraphService_executeJson_result((err !== null || typeof err === 'undefined') ? err : { success: result })
        output.writeMessageBegin('executeJson', Thrift.MessageType.REPLY, seqid)
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('executeJson', Thrift.MessageType.EXCEPTION, seqid)
      }
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}
GraphServiceProcessor.prototype.process_executeJsonWithParameter = function(seqid, input, output) {
  const args = new GraphService_executeJsonWithParameter_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.executeJsonWithParameter.length === 3) {
    Q.fcall(this._handler.executeJsonWithParameter.bind(this._handler),
      args.sessionId,
      args.stmt,
      args.parameterMap
    ).then(function(result) {
      const result_obj = new GraphService_executeJsonWithParameter_result({ success: result })
      output.writeMessageBegin('executeJsonWithParameter', Thrift.MessageType.REPLY, seqid)
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    }).catch(function (err) {
      let result
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
      output.writeMessageBegin('executeJsonWithParameter', Thrift.MessageType.EXCEPTION, seqid)
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  } else {
    this._handler.executeJsonWithParameter(args.sessionId, args.stmt, args.parameterMap, function (err, result) {
      let result_obj
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new GraphService_executeJsonWithParameter_result((err !== null || typeof err === 'undefined') ? err : { success: result })
        output.writeMessageBegin('executeJsonWithParameter', Thrift.MessageType.REPLY, seqid)
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('executeJsonWithParameter', Thrift.MessageType.EXCEPTION, seqid)
      }
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}
GraphServiceProcessor.prototype.process_verifyClientVersion = function(seqid, input, output) {
  const args = new GraphService_verifyClientVersion_args()
  args.read(input)
  input.readMessageEnd()
  if (this._handler.verifyClientVersion.length === 1) {
    Q.fcall(this._handler.verifyClientVersion.bind(this._handler),
      args.req
    ).then(function(result) {
      const result_obj = new GraphService_verifyClientVersion_result({ success: result })
      output.writeMessageBegin('verifyClientVersion', Thrift.MessageType.REPLY, seqid)
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    }).catch(function (err) {
      let result
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
      output.writeMessageBegin('verifyClientVersion', Thrift.MessageType.EXCEPTION, seqid)
      result.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  } else {
    this._handler.verifyClientVersion(args.req, function (err, result) {
      let result_obj
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new GraphService_verifyClientVersion_result((err !== null || typeof err === 'undefined') ? err : { success: result })
        output.writeMessageBegin('verifyClientVersion', Thrift.MessageType.REPLY, seqid)
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message)
        output.writeMessageBegin('verifyClientVersion', Thrift.MessageType.EXCEPTION, seqid)
      }
      result_obj.write(output)
      output.writeMessageEnd()
      output.flush()
    })
  }
}

exports.Client = GraphServiceClient
exports.Processor = GraphServiceProcessor
